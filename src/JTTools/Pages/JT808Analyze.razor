@page "/jt808"

@using JT808.Protocol;
@using JT808.Protocol.Extensions;
@using JT808.Protocol.Exceptions;
@using JTTools.Configs;
@using System.Text;
@using System.Text.Encodings.Web;
@using System.Text.Unicode;
@inject IJT808Config  config
@inject JT808_JT1078_Config  jT808_JT1078_Config
@inject JT808_SuBiao_Config  jT808_SuBiao_Config
@inject JT808_Streamax_Config  jT808_Streamax_Config
@using OneOf;

<Tag Color="blue">如有分包，请换行区分。</Tag>
<br />
<Select TItemValue="string" TItem="string" DefaultValue="@("JT808")" @bind-Value="@protocolType" Style="width:260px" OnSelectedItemChanged="OnSelectProtocolType">
    <SelectOptions>
        <SelectOption TItemValue="string" TItem="string" Label="国标(通过包自动识别版本号)" Value="@("JT808")" />
        <SelectOption TItemValue="string" TItem="string" Label="国标扩展JT1078" Value="@("JT808_JT1078")" />
        <SelectOption TItemValue="string" TItem="string" Label="国标扩展主动安全(苏标)" Value="@("JT808_SuBiao")" />
        <SelectOption TItemValue="string" TItem="string" Label="国标扩展主动安全(粤标)" Value="@("JT808_YueBiao")" />
        <SelectOption TItemValue="string" TItem="string" Label="公交扩展协议(锐明)" Value="@("JT808_JTRM")" />
        <SelectOption TItemValue="string" TItem="string" Label="国标(强制使用2013版本解析)" Value="@("JT2013Force")" />
    </SelectOptions>
</Select>

<Button Type="primary" @onclick="Query">分析</Button>

<TextArea AllowClear="true" MinRows="10" MaxRows="15" @bind-Value="@HexData" OnPressEnter="OnAreaTextPressEnter" />

@if (isOpen)
{
    <Alert Type="@AlertType.Error" Description="@ErrerMessage" Closable AfterClose="OnDismiss" />
}

<div style="padding: 26px; min-height: 350px">
    @if (JT808HeaderPackages != null)
    {
        <AntList DataSource="@JT808HeaderPackages" TItem="JT808HeaderPackage">
            <ListItem>
                <ListItemMeta>
                    <TitleTemplate>
                        <Tag Color="orange">终端号：@context.Header.TerminalPhoneNo</Tag>
                        <Tag Color="volcano">消息Id：@("0x" + context.Header.MsgId.ToString("X2"))</Tag>
                        <Tag Color="purple">消息流水号：@context.Header.MsgNum</Tag>
                        <Tag Color="pink">设备版本号：@(((JT808.Protocol.Enums.JT808Version)context.Header.ProtocolVersion).ToString())</Tag>
                        <Tag Color="red">总分包数：@context.Header.PackgeCount</Tag>
                        <Tag Color="blue">当前页：@context.Header.PackageIndex</Tag>
                        <Tag Color="cyan">数据体长度：@context.Header.MessageBodyProperty.DataLength</Tag>
                        <Tag Color="geekblue">是否加密：@context.Header.MessageBodyProperty.Encrypt.ToString()</Tag>
                    </TitleTemplate>
                    <DescriptionTemplate>
                        <pre>
                        @context.Bodies.ToHexString()
                    </pre>
                    </DescriptionTemplate>
                </ListItemMeta>
            </ListItem>
        </AntList>
    }
    <pre>
       @Json
    </pre>
</div>

@code {

    private JT808Serializer Serializer;

    private JT808Serializer JTRM_Serializer;

    private JT808Serializer JTSuBiao_Serializer;

    private JT808Serializer JTYueBiao_Serializer;

    private JT808Serializer JT1078Serializer;

    string protocolType = "JT808";
    private List<JT808HeaderPackage> JT808HeaderPackages;
    private string HexData = HexDataTmp;
    private static string HexDataTmp = "7E 02 00 00 26 12 34 56 78 90 12 00 7D 02 00 00 00 01 00 00 00 02 00 BA 7F 0E 07 E4 F1 1C 00 28 00 3C 00 00 18 10 15 10 10 10 01 04 00 00 00 64 02 02 00 7D 01 13 7E";
    private static string Hex2013ForceTmp = "7e0102400c01003000068109024a3130303330303030363831857e";
    private static string HexSubDataTmpn7E1205203804066657506200EC000200020120121900163320121900360700000000000000000001010F0CE4CD0120121900002220121900163300000000000000000001010C6F9E7B5D7E";

    private string Json;

    private string ErrerMessage;

    private bool isOpen = false;

    void OnDismiss()
    {
        isOpen = !isOpen;
    }

    private void OnSelectProtocolType(string value)
    {
        if ("JT808_JT1078" == protocolType)
        {
            HexData = HexSubDataTmp;
        }
        else if("JT2013Force"== protocolType)
        {
            HexData = Hex2013ForceTmp;
        }
        else
        {
            HexData = HexDataTmp;
        }
        protocolType = value;
        //StateHasChanged();
    }

    private void OnAreaTextPressEnter(KeyboardEventArgs eventArgs)
    {
        HexData += "\n";
    }

    protected override void OnInitialized()
    {
        Serializer = config.GetSerializer();
        JT1078Serializer = jT808_JT1078_Config.GetSerializer();
        JTSuBiao_Serializer = jT808_SuBiao_Config.GetSerializer();
        JTRM_Serializer = jT808_Streamax_Config.GetSerializer();
    }

    private void Query()
    {
        try
        {
            isOpen = false;
            JT808HeaderPackages = null;
            var hexs = HexData.Split("\n", StringSplitOptions.RemoveEmptyEntries);
            if (hexs.Length == 1)
            {
                var data = HexData.ToHexBytes();
                switch (protocolType)
                {
                    case "JT808":
                        Json = Serializer.Analyze(data, options: JTJsonWriterOptions.Instance);
                        break;
                    case "JT808_JT1078":
                        Json = JT1078Serializer.Analyze(data, options: JTJsonWriterOptions.Instance);
                        break;
                    case "JT808_SuBiao":
                        Json = JTSuBiao_Serializer.Analyze(data, options: JTJsonWriterOptions.Instance);
                        break;
                    case "JT808_JTRM":
                        Json = JTRM_Serializer.Analyze(data, options: JTJsonWriterOptions.Instance);
                        break;
                    case "JT2013Force":
                        Json = Serializer.Analyze(data, JT808.Protocol.Enums.JT808Version.JTT2013Force ,options: JTJsonWriterOptions.Instance);
                        break;
                }
            }
            else if (hexs.Length > 1)
            {
                SortedList<int, JT808HeaderPackage> sort = new SortedList<int, JT808HeaderPackage>();
                var total = 0;
                for (var i = 0; i < hexs.Length; i++)
                {
                    var data = hexs[i].ToHexBytes();
                    var headerPackage = Serializer.HeaderDeserialize(data);
                    total = headerPackage.Header.PackgeCount;
                    sort.Add(headerPackage.Header.PackageIndex, headerPackage);
                }
                if (sort.Count == total)
                {
                    List<byte> bodies = new List<byte>();
                    ushort msgid = 0;
                    foreach (var item in sort)
                    {
                        msgid = item.Value.Header.MsgId;
                        bodies = bodies.Concat(item.Value.Bodies).ToList();
                    }
                    JT808HeaderPackages = sort.Select(s => s.Value).ToList();
                    switch (protocolType)
                    {
                        case "JT808":
                            Json = Serializer.Analyze(msgid, bodies.ToArray(), options: JTJsonWriterOptions.Instance);
                            break;
                        case "JT808_JT1078":
                            Json = JT1078Serializer.Analyze(msgid, bodies.ToArray(), options: JTJsonWriterOptions.Instance);
                            break;
                        case "JT808_SuBiao":
                            Json = JTSuBiao_Serializer.Analyze(msgid, bodies.ToArray(), options: JTJsonWriterOptions.Instance);
                            break;
                        case "JT808_JTRM":
                            Json = JTRM_Serializer.Analyze(msgid, bodies.ToArray(), options: JTJsonWriterOptions.Instance);
                            break;
                        case "JT2013Force":
                            Json = Serializer.Analyze(msgid, bodies.ToArray(), JT808.Protocol.Enums.JT808Version.JTT2013Force, options: JTJsonWriterOptions.Instance);
                            break;
                    }
                }
                else
                {
                    Json = "包数不匹配,请确认清楚！";
                }
            }
        }
        catch (JT808Exception ex)
        {
            isOpen = !isOpen;
            Json = "";
            ErrerMessage = ex.Message;
        }
        catch (Exception ex)
        {
            isOpen = !isOpen;
            Json = "";
            ErrerMessage = ex.StackTrace;
        }
    }
}
